import {INestApplication, ValidationPipe} from "@nestjs/common";
import {Test} from "@nestjs/testing";
import {TypeOrmModule} from "@nestjs/typeorm";
import * as request from 'supertest';
import {AuthModule} from "./src/auth/auth.module";
import {Repository} from "typeorm";
import {UserEntity} from "./src/user/user.entity";
let app: INestApplication;
let repository: Repository<FriendRequestEntity>;
import 'dotenv/config';
import {FriendRequestModule} from "./src/friendRequest/friendRequest.module";
import {FriendRequestEntity} from "./src/friendRequest/friendRequest.entity";
jest.setTimeout(10000);
let token_user1;
let token_user2;
let id;
describe("friendRequest route", ()=>{
    beforeAll(async()=> {
        const module = await
            Test.createTestingModule({
                imports: [
                    FriendRequestModule,
                    // Use the e2e_test database to run the tests
                    TypeOrmModule.forRoot({
                        type: "mysql",
                        host: process.env.NEST_HOST,
                        username: process.env.TEST_USERNAME,
                        password: process.env.TEST_PASSWORD || '',
                        synchronize: true,
                        logging: false,
                        entities: ["src/**/*.entity.ts"],
                        port: parseInt(process.env.TEST_PORT),
                        database: process.env.TEST_DATABASE,
                    }),
                ],
            }).compile();
        app = module.createNestApplication();
        app.useGlobalPipes(new ValidationPipe());

        await app.init();
        repository = module.get('friendRequestEntityRepository');
        await request(app.getHttpServer()).post('/auth/register').send({username:"pabla",password:"escobar",isPsy:true });
        await request(app.getHttpServer()).post('/auth/register').send({username:"jeanne",password:"escobar",isPsy:true });
        let user1_result = await request(app.getHttpServer()).post('/auth/login').send({username:"herve",password:"escobar"});
        token_user1 = user1_result.body.token.access_token;

        let user2_result = await request(app.getHttpServer()).post('/auth/login').send({username:"jeanne",password:"escobar"});
        token_user2 = user2_result.body.token.access_token;
    });

    it('/ (POST) Create psychologist without login should return 401', async () => {

        return request(app.getHttpServer())
            .post('/psychologist')
            .expect(401)
            .expect({message:"Unauthorized",statusCode: 401});
    });


    

    afterAll(async () => {
        await repository.query('DELETE FROM friend_request;');
        await repository.query('DELETE FROM user;');
        await app.close();
    });

});